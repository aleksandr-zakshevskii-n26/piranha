
[[rules]]
name = "enum_parameterized"
query = """
    %{parameterized_enum_entry}%
        %{identifiers_list}%
    %{/parameterized_enum_entry}%
"""
replace_node = "enum_entry"
replace = ""

[[rules]]
name = "enum"
query = """
    (enum_entry
        (simple_identifier) @@in@@
    ) @enum_entry
"""
replace_node = "enum_entry"
replace = ""

[[rules]]
name = "sealed_class"
query = """
    (object_declaration
        (type_identifier) @@in@@
        (delegation_specifier
            (user_type
                (type_identifier)
            )
        )
    ) @object_declaration
"""
replace_node = "object_declaration"
replace = ""

[[rules]]
name = "import"
query = """
    (import_header
        (identifier
            (simple_identifier) @@in@@
        )
    ) @import_header
"""
replace_node = "import_header"
replace = ""

[[rules]]
name = "sealed_class_parameterized"
query = """
    %{parameterized_sealed_class}%
        %{identifiers_list}%
    %{/parameterized_sealed_class}%
"""
replace_node = "object_declaration"
replace = ""

[[rules]]
name = "property"
query = """
    (companion_object
        (class_body
            (property_declaration
                (modifiers (_))
                (variable_declaration
                    (simple_identifier) @@out@@
                )
                [
                    %{identifiers_list}%
                ]
            ) @property_declaration
        )
    )
"""
replace_node = "property_declaration"
replace = ""

[[rules]]
name = "variable"
query = """
    (property_declaration
        (variable_declaration
            (simple_identifier) @@out@@
        )
        [
            %{identifiers_list}%
        ]
    ) @variable_declaration
"""
replace_node = "variable_declaration"
replace = ""

[[rules]]
name = "lambda"
query = """
    [
        (
            %{function_declaration}%
                %{method_call_expression}%
                    %{identifiers_list}%
                %{/method_call_expression}%
            %{/function_declaration}%
        )
        (
            %{function_declaration}%
                %{extension_call_expression}%
                    %{identifiers_list}%
                %{/extension_call_expression}%
            %{/function_declaration}%
        )
    ]
"""
replace_node = "function_declaration"
replace = ""

[[rules]]
name = "lambda_extension"
query = """
    %{function_declaration}%
        %{extension_call_expression}%
            %{identifiers_list}%
        %{/extension_call_expression}%
    %{/function_declaration}%
"""
replace_node = "function_declaration"
replace = ""

[[rules]]
name = "lambda_extension_literal"
query = """
    %{function_declaration}%
        %{extension_call_expression}%
            (string_literal) @flag_name
        %{/extension_call_expression}%
    %{/function_declaration}%
"""
replace_node = "function_declaration"

[[rules]]
name = "lambda_invocation_positive"
query = """
    %{function_invocation}%
    (#match? @flag_name "^is.*|^should.*")
    (#not-match? @flag_name "^isNot.*|^shouldNot.*")
"""
replace = "@treated"
replace_node = "call_expression"
groups = ["replace_expression_with_boolean_literal"]

[[rules]]
name = "lambda_invocation_negative"
query = """
    %{function_invocation}%
    (#match? @flag_name "^isNot.*|^shouldNot.*")
"""
replace = "@untreated"
replace_node = "call_expression"
groups = ["replace_expression_with_boolean_literal"]

[[rules]]
name = "expression_invocation_positive"
query = """
    [
        (
            %{method_call_expression}%
                %{identifiers_list}%
            %{/method_call_expression}%
        )
        (
            %{extension_call_expression}%
                %{identifiers_list}%
            %{/extension_call_expression}%
        )
    ]

    (#match? @@out@@ "^is.*|^should.*")
    (#not-match? @@out@@ "^isNot.*|^shouldNot.*")
"""
groups = ["replace_expression_with_boolean_literal"]
replace_node = "call_expression"
replace = "@treated"

[[rules]]
name = "expression_invocation_negative"
query = """
    [
        (
            %{method_call_expression}%
                %{identifiers_list}%
            %{/method_call_expression}%
        )
        (
            %{extension_call_expression}%
                %{identifiers_list}%
            %{/extension_call_expression}%
        )
    ]

    (#match? @@out@@ "^isNot.*|^shouldNot.*")
"""
groups = ["replace_expression_with_boolean_literal"]
replace_node = "call_expression"
replace = "@untreated"

[[rules]]
name = "infix_expression"
query = """
    (infix_expression
        (call_expression
            (simple_identifier)
            (call_suffix
                (annotated_lambda
                    (lambda_literal
                        (statements
                            [
                                (
                                    %{method_call_expression}%
                                        %{identifiers_list}%
                                    %{/method_call_expression}%
                                )
                                (
                                    %{extension_call_expression}%
                                        %{identifiers_list}%
                                    %{/extension_call_expression}%
                                )
                                (
                                    %{function_invocation}%
                                )
                            ]
                        )
                    )
                )
            )
        )
        (simple_identifier)
        (boolean_literal)
    ) @infix_expression
"""
groups = ["replace_expression_with_boolean_literal"]
replace_node = "infix_expression"
replace = ""
